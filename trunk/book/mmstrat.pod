=pod

=head1 NAME

mmstrat - build Mastermind strategies

=head1 SYNOPSIS

mmstrat B<-s> I<strategy> [options] [B<-r> rules]

mmstrat B<-p> [I<secret>] [options]

mmstrat B<-d> [options]

=head1 DESCRIPTION

This program demonstrates state-of-the-art strategies for playing the Mastermind game.

The program has three mutually exclusive modes of operation, which must be specified 
by one of the following command line option:

=over 

=item B<-s> I<strategy>

Strategy mode. The program will build the strategy tree using the given I<strategy>
for the given rules (which can be specified by the B<-r> switch). After the tree
is built, it is printed to STDOUT in Irving format. A list of available strategies
is detailed in the next section.

=item B<-p> [I<secret>]

Player mode. This will launch an interactive interface where the user inputs guesses
and the program gives responses. The program exits when the user reveals the secret.
If I<secret> is specified, it is used by the program as the secret. This is only 
useful for debugging purpose.

=item B<-d>

Diagnostics mode. This will launch an interactive debugger which provides a set of
commands for examining the codeword space.

=back

=head1 STRATEGIES

There are two categories of strategies implemented by this program: heuristic strategies
and optimal strategies. A heuristic strategy relies on a heuristic function to make a
I<good> guess, while an optimal strategy performs an exhaustive search to find an
I<optimal> guess.

The following heuristic strategies are implemented: (~ indicates no favor of remaining possibility as guess)

=over

=item B<simple>

simple strategy

=item B<minmax>

min-max heuristic strategy

=item B<minavg>[~]

min-average heuristic strategy

=item B<entropy>[~]

max-entropy heuristic strategy

=item B<parts>[~]

max-parts heuristic strategy

=back

The following optimal strategies are implemented:

=over

=item B<optimal>

optimal strategy that minimizes the total number of steps required to reveal all secrets

=back

=head1 OPTIONS

The program accepts a set of options which control the behavior of various strategies.
The most relevant options are probably B<-r> and B<-md>.

=over

=item B<-e> I<filter>

Specifies the equivalence filter to use when checking for canonical guesses. This option is 
for testing purpose only because the default filter works very well. Available filters are:

=over

=item B<default> 

composite filter (color + constraint)

=item B<color>

filter by color equivalence

=item B<constraint>

filter by constraint equivalence

=item B<none>

do not apply any filter

=back

=item B<-h>

Display help screen and exit.

=item B<-md> I<depth>

Specify the maximum number of guesses allowed to reveal any single secret. This option is only
supported for an optimal strategy. If not all secrets can be revealed within I<depth> guesses,
no strategy will be generated.

=item B<-mt> I<n>

Enable parallel execution with I<n> threads. If I<n> is not specified, it defaults to the number 
of logical processors (CPUs or cores) on the host machine. If this option is not specified or if
multithreading is not supported on the host machine, the program will execute in a single thread.

=item B<-po>

Make guesses from remaining possibilities only. If this option is not specified, the program will
make guesses from the entire set of valid codewords. Specifying this option will drastically 
reduce the execution time of the program, at the cost of finding only a sub-optimal strategy.

=item B<-prof>

Collect and display profiling details. The program has built-in support for intrumental profiling
on critical routines, but the profiling is not turned on by default. Specifying this option will
collect profiling data at run-time, and display them before the program exits. There is a slight
performance panelty (around 5%) to collect profiling data.

=item B<-q>

Quiet mode; display minimal information.

=item B<-r> I<rules>

Specify the rules of the game. A set of rules consists of three parts:

=over

=item 1. number of pegs

=item 2. number of colors

=item 3. whether repetition of color is allowed

=back

The rules are specified in the form "B<p> I<pegs> B<c> I<colors> B<r>" to allow 
color repetition or "B<p> I<pegs> B<c> I<colors> B<n>" to disallow color repetition,
without quotes or spaces in between. In addition, it can take one of the following
predefined values:

=over

=item B<mm> or C<p4c6r>

Standard Mastermind rules (4 pegs, 6 colors, with repetition). This is the default if no B<-r>
option is given.

=item B<bc> or C<p4c10n>

Bulls and Cows rules (4 pegs, 10 colors, no repetition).

=item B<lg> or C<p5c8r>

Logik rules (5 pegs, 8 colors, with repetition).

=back

=item B<-v>

Display version and exit.

=back

=head1 OUTPUT

Describe the strategy tree output format here.

=head1 EXAMPLES

The following command finds an optimal strategy for the standard Mastermind rules.
It is optimal in the sense that it takes the lowest average number of guesses to 
reveal each secret. This should produce a result below one second.

    mmstrat -s optimal

The following command finds an optimal strategy for Bulls and Cows rules. This
takes about 5-10 minutes to run on a modern computer.

    mmstrat -s optimal -r bc

The following command finds a heuristic strategy for Logik rules using the C<entropy>
heuristic. In addition, on machines with multiple CPUs or cores, it will execute
with two threads. This takes about 10 seconds to run.

    mmstrat -s entropy -r p5c8r -mt 2

=head1 SEE ALSO

A list of related commands or functions.

=head1 BUGS
    
List known bugs.

=head1 AUTHOR

fancidev@gmail.com

=head1 COPYRIGHT

This program and its source code is distributed under MIT License.

=head1 VERSION

Mastermind-Strategies Version 1.0 (Mar 2012).

Visit http://code.google.com/p/mastermind-strategy/ for updates.

=cut 
